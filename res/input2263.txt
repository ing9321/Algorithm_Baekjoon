15
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 
1 3 2 5 7 6 4 9 11 10 13 15 14 12 8 

// 인오더
// 포스트오더
// 프리오더



	/** 전위순회 : 현재노드 -> 왼쪽(index*2) -> 오른쪽(index*2+1) */
	public static void preorder(int index) {
		if(index <= N && arrTree[index] != 0) {
			System.out.print(arrTree[index] + " "); // 현재노드 V
			preorder(2*index); // 왼쪽 노드 L
			preorder(2*index+1); // 오른쪽 노드 R
		}
	}
	/** 중위순회 : 왼쪽(index*2) -> 현재노드 -> 오른쪽(index*2+1) */
	public static void inorder(int index) {
		if(index <= N && arrTree[index] != 0) {
			inorder(2*index); // 왼쪽 노드 L
			System.out.print(arrTree[index] + " "); // 현재노드 V
			inorder(2*index+1); // 오른쪽 노드 R
		}
	}
	/** 후위순회 : 왼쪽(index*2) -> 오른쪽(index*2+1) -> 현재노드 */
	public static void postorder(int index) {
		if(index <= N && arrTree[index] != 0) {
			postorder(2*index); // 왼쪽 노드 L
			postorder(2*index+1); // 오른쪽 노드 R
			System.out.print(arrTree[index] + " "); // 현재노드 V
		}
	}