6
3 1 6 4 5 2

100


3 * 3
4 * 1
10 * 1



// 부분배열 고르기
	private static BigInteger divcon(int start, int end) throws IOException {
		if(start == end) {
			return BigInteger.valueOf(arrN[start] * arrN[end]);
		}
		
		int left = (start + end) / 2;
		int right = left+1;
		bw.append(start + " to " + left + ", " + right + " to " + end + "\n");
		
		BigInteger ret = BigInteger.ZERO;
		BigInteger retL = divcon(start, left);
		bw.append("retL : " + retL);
		BigInteger retR = divcon(right, end);
		bw.append("retR : " + retR);
		
		bw.append("\n" + start + " to " + end + "\n");
		if(retL.compareTo(retR) == 1) {
			ret = retL;
		} else {
			ret = retR;
		}
		bw.append(" ret : " + ret + " \n");
		
		
		bw.append("\n" + start + " to " + left + ", " + right + " to " + end + "\n");
		int MIN = Math.min(arrN[left], arrN[right]);
		BigInteger retLR = BigInteger.valueOf((arrN[left] + arrN[right]) * MIN);
		bw.append("min : " + MIN + " retLR : " + retLR);
		if(ret.compareTo(retLR) == -1) {
			ret = retLR;
		}
		bw.append("\n retF : " + ret + " \n");
		bw.flush();
		
		return ret;
	}